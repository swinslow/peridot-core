// SPDX-License-Identifier: Apache-2.0 OR GPL-2.0-or-later
syntax = "proto3";

package controller;

option go_package = "github.com/swinslow/peridot-core/pkg/controller";

import "pkg/status/status.proto";
import "pkg/agent/agent.proto";

// Controller defines the main GRPC interface provided by the
// peridot controller to external callers, such as peridotctl.
service Controller {

    // ===== Controller startup and status =====

    // Start the Controller. Should only be called after all agents have
    // been added via AddAgent.
    rpc Start(StartReq) returns (StartResp) {}

    // Get Controller overall status.
    rpc GetStatus(GetStatusReq) returns (GetStatusResp) {}

    // Shut down the Controller and all agents.
    rpc Stop(StopReq) returns (StopResp) {}

    // ===== Agents =====

    // AddAgent configures the controller to know about a new
    // Agent that is available for new Jobs and JobSets. It will
    // return a failure message if called after the Controller has
    // started (e.g., after Start has been called) or if an Agent
    // already exists with the given Name.
    rpc AddAgent(AddAgentReq) returns (AddAgentResp) {}

    // GetAgent requests configuration information about the Agent with
    // the given name.
    rpc GetAgent(GetAgentReq) returns (GetAgentResp) {}

    // GetAllAgents requests information about all registered Agents.
    rpc GetAllAgents(GetAllAgentsReq) returns (GetAllAgentsResp) {}

    // ===== JobSetTemplates =====

    // AddJobSetTemplate configures the controller to know about a new
    // JobSetTemplate that is available for new JobSets. It will
    // return a failure message if an JobSetTemplate already exists with
    // the given Name.
    rpc AddJobSetTemplate(AddJobSetTemplateReq) returns (AddJobSetTemplateResp) {}

    // GetJobSetTemplate requests information about the JobSetTemplate with the
    // given name and type.
    rpc GetJobSetTemplate(GetJobSetTemplateReq) returns (GetJobSetTemplateResp) {}

    // GetAllJobSetTemplates requests information about all registered JobSetTemplates.
    rpc GetAllJobSetTemplates(GetAllJobSetTemplatesReq) returns (GetAllJobSetTemplatesResp) {}

    // ===== Jobs =====

    // Jobs cannot be started individually. Only a JobSet can be started from the
    // GRPC interface.

    // GetJob requests information on the specified Job.
    rpc GetJob(GetJobReq) returns (GetJobResp) {}

    // GetAllJobsForJobSet requests information on all known Jobs for the given
    // JobSet.
    rpc GetAllJobsForJobSet(GetAllJobsForJobSetReq) returns (GetAllJobsForJobSetResp) {}

    // GetAllJobs requests information on all known Jobs.
    rpc GetAllJobs(GetAllJobsReq) returns (GetAllJobsResp) {}

    // ===== JobSet =====

    // StartJobSet requests that the Controller begin a new JobSet, with the
    // specified configuration.
    rpc StartJobSet(StartJobSetReq) returns (StartJobSetResp) {}

    // GetJobSet requests information on the specified JobSet.
    rpc GetJobSet(GetJobSetReq) returns (GetJobSetResp) {}

    // GetAllJobSets requests information on all known JobSets.
    rpc GetAllJobSets(GetAllJobSetsReq) returns (GetAllJobSetsResp) {}

}

// ===== Controller startup and status =====

// StartReq requests that the Controller start running.
message StartReq {}

// StartResp tells whether the Controller could try to start.
message StartResp {
    // will the Controller try to start?
    bool starting = 1;

    // if not, why not? should only be set if starting == false
    string errorMsg = 2;
}

// GetStatusReq requests the current status of the Controller.
message GetStatusReq {}

// GetStatusResp tells the Controller's overall current status.
message GetStatusResp {
    // controller overall run status
    status.Status runStatus = 1;

    // controller overall health status
    status.Health healthStatus = 2;
    
    // any output messages
    string outputMsg = 3;

    // any error messages; should only be set if isError == true
    string errorMsg = 4;
}

// StopReq requests that the Controller stop running.
message StopReq {}

// StopResp tells whether the Controller could try to stop.
message StopResp {
    bool stopping = 1;
}

// ===== Agents =====

// AgentConfig defines an Agent instance's configuration.
message AgentConfig {
    // name for this agent instance. must be unique across the controller.
    string name = 1;

    // url where this agent can be found
    string url = 2;

    // port on the url where this agent can be found
    uint32 port = 3;

    // agent type; need not be unique across instances (e.g., can have multiple
    // idsearcher instances with 'idsearcher' type and different configs, as
    // long as they have different names).
    string type = 4;

    // agent-specific key-value pairs
    message AgentKV {
        string key = 1;
        string value = 2;
    }
    repeated AgentKV kvs = 5;
}

// AddAgentReq requests that a new Agent be registered with the controller.
message AddAgentReq {
    AgentConfig cfg = 1;
}

// AddAgentResp tells whether the agent could be configured.
message AddAgentResp {
    // was the agent successfully configured?
    bool success = 1;

    // any error messages; should only be set if success == false
    string errorMsg = 2;
}

// GetAgentReq requests info on the Agent with the given name.
message GetAgentReq {
    string name = 1;
}

// GetAgentResp returns info on the requested agent.
// If name was not found, success will be set to false and error message returned.
message GetAgentResp {
    // was an agent found with the given name?
    bool success = 1;

    // if success, agent configuration is returned
    AgentConfig cfg = 2;

    // if not success, error is returned
    string errorMsg = 3;
}

// GetAllAgentsReq requests info on all registered Agents.
message GetAllAgentsReq {}

// GetAllAgentsResp returns info on all registered Agents.
message GetAllAgentsResp {
    repeated AgentConfig cfgs = 1;
}

// ===== JobSetTemplates =====

// StepAgentTemplate is a JobSetTemplate step for a single Agent.
message StepAgentTemplate {
    // the agent's name
    string name = 1;
}

// StepJobSetTemplate is a JobSetTemplate step for a separate JobSet.
message StepJobSetTemplate {
    // the JobSetTemplate's name
    string name = 1;
}

// StepConcurrentTemplate represents a collection of steps that can run concurrently.
message StepConcurrentTemplate {
    // the set of concurrent steps
    repeated StepTemplate steps = 1;
}

// Step represents the union of step types for templates.
message StepTemplate {
    oneof s {
        StepAgentTemplate agent = 1;
        StepJobSetTemplate jobset = 2;
        StepConcurrentTemplate concurrent = 3;
    }
}

// JobSetTemplate defines a template for new JobSets.
message JobSetTemplate {
    // unique name for the template
    string name = 1;

    // this JobSet's step templates
    repeated StepTemplate steps = 2;
}

// AddJobSetTemplateReq requests that a new JobSetTemplate be registered with
// the controller.
message AddJobSetTemplateReq {
    JobSetTemplate jst = 1;
}

// AddJobSetTemplateResp tells whether the template was successfully
// registered.
message AddJobSetTemplateResp {
    // was the template successfully configured?
    bool success = 1;

    // any output messages
    string outputMsg = 2;

    // any error messages; should only be set if success == false
    string errorMsg = 3;
}

// GetJobSetTemplateReq requests info on the JobSetTemplate with the given name.
message GetJobSetTemplateReq {
    string name = 1;
}

// GetJobSetTemplateResp returns info on the requested JobSetTemplate.
// If name was not found, success will be set to false and error message returned.
message GetJobSetTemplateResp {
    // was a JobSetTemplate found with the given name?
    bool success = 1;

    // if success, JobSetTemplate is returned
    JobSetTemplate jst = 2;

    // if not success, error is returned
    string errorMsg = 3;
}

// GetAllJobSetTemplatesReq requests info on all registered JobSetTemplates.
message GetAllJobSetTemplatesReq {}

// GetAllJobSetTemplatesResp returns info on all registered JobSetTemplates.
message GetAllJobSetTemplatesResp {
    repeated JobSetTemplate jsts = 1;
}

// ===== Jobs =====

// GetJobReq requests information on the specified Job's status.
message GetJobReq {
    uint64 jobID = 1;
}

message JobDetails {
    // Job ID
    uint64 jobID = 1;

    // ID of JobSet that this job is part of
    uint64 jobSetID = 2;

    // Step ID # within JobSet that this job is part of
    uint64 jobSetStepID = 3;

    // Step order within JobSet that this job is part of
    uint64 jobSetStepOrder = 4;

    // the job's agent name
    string agentName = 5;

    // configuration for this job
    agent.JobConfig cfg = 6;

    // status of this job
    agent.StatusReport st = 7;
}

// GetJobResp returns information on the specified Job's status.
message GetJobResp {
    // was a job found with the given ID?
    bool success = 1;

    // if success, the job is returned
    JobDetails job = 2;

    // if not success, error is returned
    string errorMsg = 3;
}

// GetAllJobsForJobSetReq requests information on all known Jobs in the
// JobSet with the given ID.
message GetAllJobsForJobSetReq {
    uint64 jobSetID = 1;
}

// GetAllJobsForJobSetResp returns information on all known Jobs in the
// JobSet with the given ID.
message GetAllJobsForJobSetResp {
    repeated JobDetails jobs = 1;
}

// GetAllJobsReq requests information on all known Jobs.
message GetAllJobsReq {}

// GetAllJobsResp returns information on all known Jobs.
message GetAllJobsResp {
    repeated JobDetails jobs = 1;
}

// ===== JobSet =====

// JobSet-specific key-value pairs; will be passed along to all Agents
message JobSetConfig {
    string key = 1;
    string value = 2;
}

// StartJobSetReq requests that a single new JobSet be started.
message StartJobSetReq {
    // name of the JobSetTemplate to run as a new JobSet
    string jstName = 1;

    // configuration for this JobSet
    repeated JobSetConfig cfgs = 2;
}

// StartJobSetResp tells whether the JobSet was started successfully.
message StartJobSetResp {
    // was the JobSet successfully started?
    bool success = 1;

    // new JobSet ID
    uint64 jobSetID = 2;

    // all the jobs (with their IDs and step IDs) in this JobSet
    repeated GetJobResp jobs = 3;

    // any output messages
    string outputMsg = 4;

    // any error messages; should only be set if success == false
    string errorMsg = 5;
}

// GetJobSetReq requests information on the specified JobSet's status.
message GetJobSetReq {
    uint64 jobSetID = 1;
}

// StepAgent is a JobSet step for a single Agent.
message StepAgent {
    // the agent's name
    string agentName = 1;

    // the actual Job's ID
    uint64 jobID = 2;
}

// StepJobSet is a JobSet step for a separate JobSet.
message StepJobSet {
    // the JobSet's template name
    string templateName = 1;

    // the actual JobSet's ID
    uint64 jobSetID = 2;
}

// StepConcurrent represents a collection of steps that can run concurrently.
message StepConcurrent {
    // the set of concurrent steps
    repeated Step steps = 1;
}

// Step represents the union of step types for s.
message Step {
    oneof s {
        StepAgent agent = 1;
        StepJobSet jobset = 2;
        StepConcurrent concurrent = 3;
    }

    // unique ID of step within JobSet
    uint64 stepID = 4;

    // ordering of step within jobSet
    uint64 stepOrder = 5;

    // step's overall status and health
    status.Status runStatus = 6;
    status.Health healthStatus = 7;
}

message JobSetStatusReport {
    // is the JobSet running?
    status.Status runStatus = 1;

    // what is the JobSet's health?
    status.Health healthStatus = 2;

    // time when the JobSet was started, as Unix time
    int64 timeStarted = 3;

    // time when the JobSet stopped running, as Unix time
    int64 timeFinished = 4;

    // logged output, if any. should be short messages; anything
    // lengthy should be separately logged or reported elsewhere
    string outputMessages = 5;

    // logged errors, if any
    string errorMessages = 6;
}

message JobSetDetails {
    // JobSet ID
    uint64 jobSetID = 1;

    // name of JobSetTemplate for this JobSet
    string templateName = 2;

    // overall status of this JobSet
    JobSetStatusReport st = 3;

    // steps
    repeated Step steps = 4;

}

// GetJobSetResp returns information on the specified JobSet's status.
message GetJobSetResp {
    // was a JobSet found with the given ID?
    bool success = 1;

    // if success, the JobSet is returned
    JobSetDetails jobSet = 2;

    // if not success, error is returned
    string errorMsg = 3;
}

// GetAllJobSetsReq requests information on all known JobSets.
message GetAllJobSetsReq {}

// GetAllJobSetsResp returns information on all known JobSets.
message GetAllJobSetsResp {
    repeated JobSetDetails jobSets = 1;
}
